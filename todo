 - the momentum + risk parity seems too good to be true...
 	 - although... i am selecting by momentum FIRST. so high flying etfs like EEM will be selected. then i'm toning down my exposure to them based on volatility...
 	 	- so during 2007, when equities were faltering, i stopped selecting them. even before that though, i was reducing my exposure due to volatility
 	 - should i step through it, make sure there isn't any lookahead bias? esp. during times of supposed economic volatility...
 	 - what about trying to replicate the returns, by building it off mom_backtest (instead of vol_backtest)
 	 	- honestly, since i will just be copy pasting code, this should be exactly the same...
 	 - OH SHIT... the momentum and volatility metrics are being calculated on the wrong date... should be [momentum data][past month]
 	  - fix mom
 	  	- added 21 days to first index in range (otherwise you get an index out of bounds)
 	  	- also made sure mom metric was being calculated starting the day before the first day of current month
 	  - fix vol
 	  	 - ok
 	  - fix momvol
 	  	 - ok
 - 1/25/2013: finished mom, vol, and momvol algs. what's next?
 	- small batching says: make it a webapp right now
 		- django? probably a better idea than ror



 - 9/24/2013: want to make it a better alg
 	- idea: use golden cross, switch over to equities/just investing in stock market 
 		- fewer transaction costs, but potentially worse performance due to market timing
 	- idea: use golden cross, but just increase equities exposure (or have a constraint that portfolio must include equities)
 		- mitigates market timing risk
 		- i can probably rapidly prototype this in quantopian...
 		- then i have to think about what happens at golden cross: do we still wait until next trade date to implement increase in exposure? perhaps. 


 - 10/6/2013: automating the algo
	- todo
		- algo delay: pretty much done, done through sleep()
		- submitting the correct orders
			- loop through symbols (make sure you can submit multiple symbols)
			- get account value, multiply by weight, divide by market price (GET MARKET PRICE) round down to nearest integer
		- SELLING POSITIONS
			- get open positions
			- loop through them
			- sell

	- ORGANIZE FILES
		- git
 	- test: if it submits orders: leave laptop home one day, see if it submits orders through our account (paper trading account)




from Trader import Trader
trader = Trader('DU15068')
weights = {'AAPL':0.1,'TSLA':0.1}
trader.enterPositions(weights,execution_sleep=False)
